int delrow[8]={-1,0,1,0,-1,1,-1,1};
int delcol[8]={0,-1,0,1,-1,1,1,-1};
bool dfs(vector<vector<int>> &mat,int x,int y,int dx,int dy,int n,int m){
     
     if(x==dx&&y==dy) return true;
     for(int i=0;i<8;i++){
         int nx = x + delrow[i];
         int ny = y + delcol[i];
         if(nx>=0&&nx<n&&ny>=0&&ny<m&&mat[nx][ny]==1&&mat[nx][ny]!=2&&mat[nx][ny]!=0){
             mat[nx][ny]=2;
             if(dfs(mat,nx,ny,dx,dy,n,m)){
                 return true;
             }
         }
     }
     return false;
}
string Solution::solve(int x, int y, int N, int r, vector<int> &a, vector<int> &b) {
    int n = x+1;
    int m = y+1;
    vector<vector<int>> mat(n,vector<int> (m,1));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            for(int k=0;k<N;k++){
                int dist = pow((a[k] - i), 2)+pow((b[k] - j), 2);
                if(dist<=r*r){
                    mat[i][j]=0;
                }
            }
        }
    }
    // now do dfs from source 0,0 and check if x,y can be visited
    bool res = dfs(mat,0,0,x,y,n,m);
    return (res==true?"YES":"NO");
}
